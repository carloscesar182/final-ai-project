#!/usr/bin/env python3
"""
Test script to verify that the models module works correctly
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
from sklearn.preprocessing import StandardScaler

def test_models_import():
    print("Testing models module imports...")
    
    try:
        from models.train_models import train_gb, train_rf, train_nb
        print("‚úì Scikit-learn models imported successfully")
    except ImportError as e:
        print(f"‚úó Error importing scikit-learn models: {e}")
        return False
    
    try:
        from models.train_models import train_automl
        print("‚úì H2O AutoML imported successfully")
    except ImportError as e:
        print(f"‚úó Error importing H2O AutoML: {e}")
        return False
    
    return True

def test_sklearn_models():
    print("\nTesting scikit-learn models...")
    
    # Import the functions
    from models.train_models import train_gb, train_rf, train_nb
    
    # Create sample data
    X, y = make_classification(n_samples=100, n_features=4, n_classes=2, random_state=42)
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Scale the data
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_val_scaled = scaler.transform(X_val)
    
    print(f"Sample data created: {X_train_scaled.shape[0]} training samples, {X_val_scaled.shape[0]} validation samples")
    
    # Test Gradient Boosting
    try:
        print("Testing Gradient Boosting model...")
        gb_model = train_gb(X_train_scaled, y_train)
        gb_score = gb_model.score(X_val_scaled, y_val)
        print(f"‚úì Gradient Boosting trained successfully. Validation accuracy: {gb_score:.4f}")
    except Exception as e:
        print(f"‚úó Error training Gradient Boosting: {e}")
        return False
    
    # Test Random Forest
    try:
        print("Testing Random Forest model...")
        rf_model = train_rf(X_train_scaled, y_train)
        rf_score = rf_model.score(X_val_scaled, y_val)
        print(f"‚úì Random Forest trained successfully. Validation accuracy: {rf_score:.4f}")
    except Exception as e:
        print(f"‚úó Error training Random Forest: {e}")
        return False
    
    # Test Naive Bayes
    try:
        print("Testing Naive Bayes model...")
        nb_model = train_nb(X_train_scaled, y_train)
        nb_score = nb_model.score(X_val_scaled, y_val)
        print(f"‚úì Naive Bayes trained successfully. Validation accuracy: {nb_score:.4f}")
    except Exception as e:
        print(f"‚úó Error training Naive Bayes: {e}")
        return False
    
    return True

def test_h2o_availability():
    print("\nTesting H2O availability...")
    
    try:
        import h2o
        print(f"‚úì H2O version {h2o.__version__} is available")
        
        # Test H2O initialization (but don't actually start it to avoid server issues)
        from h2o.automl import H2OAutoML
        from h2o.frame import H2OFrame
        print("‚úì H2O AutoML and H2OFrame classes are available")
        
        return True
    except Exception as e:
        print(f"‚úó Error with H2O: {e}")
        return False

def main():
    print("=" * 50)
    print("Testing Models Module")
    print("=" * 50)
    
    # Test imports
    if not test_models_import():
        print("\n‚ùå Import tests failed!")
        return
    
    # Test scikit-learn models
    if not test_sklearn_models():
        print("\n‚ùå Scikit-learn model tests failed!")
        return
    
    # Test H2O availability
    if not test_h2o_availability():
        print("\n‚ùå H2O availability test failed!")
        return
    
    print("\n" + "=" * 50)
    print("üéâ All tests passed successfully!")
    print("‚úì H2O dependency resolved")
    print("‚úì All model training functions are working")
    print("‚úì Ready for machine learning workflows")
    print("=" * 50)

if __name__ == "__main__":
    main()